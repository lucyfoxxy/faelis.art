---
import slugs from "@Content/albums/slugs.json";

interface PriceItem {
  name: string;
  price?: number;
  from?: number;
  to?: number;
  unit?: string;
  note?: string;   // z.B. "from", "per view", "60 â‚¬ total"
  link?: string;
}
interface PriceCategory {
  title: string;
  subtitle?: string;
  items: PriceItem[];
}
interface PricesData {
  currency?: string;
  categories: PriceCategory[];
}

const { prices } = Astro.props as { prices: PricesData };
type albumDefinition = { slug: string; title: string };
type albumSlugs = { albums: albumDefinition[] };
const albums = (slugs as albumSlugs).albums ?? [];

const toSlug = (value: string) =>
  value
    .normalize("NFKD")
    .replace(/[\u0300-\u036f]/g, "")
    .toLowerCase()
    .replace(/&/g, "and")
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/^-+|-+$/g, "")
    .replace(/-{2,}/g, "-");

const stripParenthetical = (value: string) =>
  value.replace(/\s*\([^)]*\)\s*/g, " ").replace(/\s+/g, " ").trim();

const normalizeKey = (value: string) =>
  value
    .normalize("NFKD")
    .replace(/[\u0300-\u036f]/g, "")
    .toLowerCase()
    .replace(/&/g, "and")
    .replace(/[^a-z0-9]+/g, "");

const albumBySlug = new Map<string, albumDefinition>();
const albumByNormalized = new Map<string, albumDefinition>();

for (const album of albums) {
  const baseTitle = stripParenthetical(album.title);
  const slugForms = new Set([album.slug, toSlug(album.title), toSlug(baseTitle)]);
  for (const slug of slugForms) {
    if (!slug) continue;
    if (!albumBySlug.has(slug)) albumBySlug.set(slug, album);
  }

  const normalizedForms = new Set([album.title, baseTitle]);
  for (const form of normalizedForms) {
    const key = normalizeKey(form);
    if (!key) continue;
    if (!albumByNormalized.has(key)) albumByNormalized.set(key, album);
  }
}

const splitCategoryTitle = (title: string) => {
  const [base, ...rest] = title.split("â€“");
  const suffix = rest.join("â€“").trim();
  return { base: base.trim(), suffix: suffix.length > 0 ? suffix : "" };
};

const findAlbumForTitle = (title: string) => {
  if (!title) return undefined;
  const base = title.trim();
  if (!base) return undefined;
  const baseNoParens = stripParenthetical(base);

  const slugCandidates = new Set([toSlug(base), toSlug(baseNoParens)]);
  for (const slug of slugCandidates) {
    if (!slug) continue;
    const album = albumBySlug.get(slug);
    if (album) return album;
  }

  const normalizedCandidates = new Set([normalizeKey(base), normalizeKey(baseNoParens)]);
  for (const key of normalizedCandidates) {
    if (!key) continue;
    const album = albumByNormalized.get(key);
    if (album) return album;
  }

  return undefined;
};

type PriceCategoryWithAnchor = PriceCategory & {
  anchorId?: string;
  albumSlug?: string;
  albumTitle?: string;
  heading: string;
};

const slugUsage = new Map<string, number>();
const categories: PriceCategoryWithAnchor[] = prices.categories.map((cat) => {
  const { base, suffix } = splitCategoryTitle(cat.title);
  const album = findAlbumForTitle(base);
  if (!album) {
    return { ...cat, heading: cat.title };
  }

  const count = (slugUsage.get(album.slug) ?? 0) + 1;
  slugUsage.set(album.slug, count);
  const anchorId = count === 1 ? album.slug : `${album.slug}-${count}`;
  const heading = suffix ? `${album.title} â€“ ${suffix}` : album.title;

  return {
    ...cat,
    heading,
    albumSlug: album.slug,
    albumTitle: album.title,
    anchorId,
  };
});

const COLS = ["60%", "40%"]; // Type / Price(+Note)
const title = "Pricing"
const currency = prices.currency ?? "EUR";
const fmt = (value?: number) => {
  if (value == null) return "â€“";
  try { return new Intl.NumberFormat("de-DE", { style: "currency", currency, minimumFractionDigits: 0, maximumFractionDigits: 0 }).format(value); }
  catch { return `${value} ${currency}`; }
};
const formatPrice = (it: PriceItem) => {
  if (it.price != null) return fmt(it.price);
  if (it.from != null && it.to != null) return `${fmt(it.from)} â€“ ${fmt(it.to)}`;
  if (it.from != null) return `ab ${fmt(it.from)}`;
  return "auf Anfrage";
};
---
<section class="content-head section">
  <h1>{title}</h1>
  <div class="prose">
    <p>Here you gonna find the detailed pricing for each category.<br>
    Shown prices are approximates and final prices may vary depending on the effort needed.</p>
  </div>
</section>

<section class="section content-layout">
 {categories.map((cat) => {
    const albumHref = cat.albumSlug ? `/galleries/${cat.albumSlug}` : undefined;
    const linkLabelTitle = cat.albumTitle ?? cat.heading;
    return (
      <section id={cat.anchorId} class="content-card">
        <div class="content-card--rows">
          <h3>{cat.heading}</h3>
          <p>{albumHref ? ( 
            <a class="chip" href={albumHref} aria-label={`Open ${linkLabelTitle} album`}>
                â†’ Examples ðŸŽ¨
            </a> ): cat.heading}
          </p>    
        </div>
        <div class="content-card--subtitle">{cat.subtitle && <p>{cat.subtitle}</p>}</div>
        
        <div class="table__wrap">
          <table class="table">
            <colgroup>
              <col style={`width:${COLS[0]}`} />
              <col style={`width:${COLS[1]}`} />
            </colgroup>

            <thead>
              <tr>
                <th class="table__th table__th--left">Type</th>
                <th class="table__th table__th--right">Price</th>
              </tr>
            </thead>

            <tbody>
              {cat.items.map((it, i) => (
                <tr class={`table__tr ${i % 2 ? "is-alt" : ""}`}>
                  <td class="table__td">
                    {it.link ? <a href={it.link} rel="noopener" target="_blank">{it.name}</a> : it.name}
                    {it.unit && <span class="table__unit"> / {it.unit}</span>}
                  </td>

                  <td class="table__td table__td--right">
                    {it.note && <span class="badge">{it.note}</span>}
                    <span class="table__price">{formatPrice(it)}</span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </section>
    );
  })}
</section>
